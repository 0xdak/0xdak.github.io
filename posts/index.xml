<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 0xdak</title><link>/posts/</link><description>Recent content in Posts on 0xdak</description><generator>Hugo -- gohugo.io</generator><language>tr</language><lastBuildDate>Tue, 29 Mar 2022 17:24:58 +0300</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>A1 2017 - Injection | Türkçe Çeviri</title><link>/posts/a1-2017-baa5b/</link><pubDate>Tue, 29 Mar 2022 17:24:58 +0300</pubDate><guid>/posts/a1-2017-baa5b/</guid><description>Bu içerik, OWASP topluluğunun 2017 senesinde en çok karşılaşılan açıkları bir puana göre sıraladığı ilk 10 listede 1. sırada gelen, OWASP&amp;rsquo;ın kendi sitesinde açıkladığı Injection açığının Türkçe çevirisidir.
Orijinal yazıyı okumak isteyenler için link:
https://owasp.org/www-project-top-ten/2017/A1_2017-Injection
Anlamını bilmediğiniz veya benim Türkçe&amp;rsquo;ye bilerek çevirmediğim terimlerin anlamı için, belki bulmak umuduyla, kendi dilimde açıkladığım terimler sayfasına gidebilirsiniz.
Tehdit Aktörleri/ Saldırı Vektörleri Kırılabilirlik: 3
Hemen hemen herhangi bir veri kaynağı; bir injection vektörü, çevre değişkenleri, parametreler, private ve public web servisleri veya tüm kullanıcı türleri olabilir.</description><content>&lt;p>Bu içerik, OWASP topluluğunun 2017 senesinde en çok karşılaşılan açıkları bir puana göre sıraladığı ilk 10 listede 1. sırada gelen, OWASP&amp;rsquo;ın kendi sitesinde
açıkladığı Injection açığının Türkçe çevirisidir.&lt;/p>
&lt;p>Orijinal yazıyı okumak isteyenler için link:&lt;/p>
&lt;p>&lt;a href="https://owasp.org/www-project-top-ten/2017/A1_2017-Injection">https://owasp.org/www-project-top-ten/2017/A1_2017-Injection&lt;/a>&lt;/p>
&lt;p>Anlamını bilmediğiniz veya benim Türkçe&amp;rsquo;ye bilerek çevirmediğim terimlerin anlamı için, belki bulmak umuduyla, kendi dilimde açıkladığım terimler sayfasına gidebilirsiniz.&lt;/p>
&lt;h3 id="emtehdit-aktörleriem--emsaldırı-vektörleriem">&lt;!-- raw HTML omitted -->Tehdit Aktörleri&lt;!-- raw HTML omitted --> / &lt;!-- raw HTML omitted -->Saldırı Vektörleri&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;strong>Kırılabilirlik: 3&lt;/strong>&lt;/p>
&lt;p>Hemen hemen herhangi bir veri kaynağı; bir injection vektörü, çevre değişkenleri, parametreler, private ve public web servisleri veya tüm kullanıcı türleri olabilir. Injection açıkları: saldırgan yorumlayıcıya tehditvari bir veri gönderebildiğinde meydana gelir.&lt;/p>
&lt;h3 id="güvenlik-zayıflığı">Güvenlik Zayıflığı&lt;/h3>
&lt;p>&lt;strong>Yaygınlık: 2 | Tespit Edilebilirlik: 3&lt;/strong>&lt;/p>
&lt;p>Injection açıkları aslında çok yaygındır, özellikle de tarihi geçmiş kodlarda (deprecated). Injection açıkları genellikle SQL, LDAP, XPath, NoSQL sorguları, işletim sistemi komutları, XML-parserlar, SMTP header&amp;rsquo;ları, expression programlama dilleri ve ORM sorgularında bulunur.&lt;/p>
&lt;p>Kodu incelerken injection açıklarını keşfetmek kolaydır. Scanner&amp;rsquo;lar ve fuzzer&amp;rsquo;lar, saldırganların injection açıklarını bulmalarında yardımcı olurlar.&lt;/p>
&lt;h3 id="etkiler">Etkiler&lt;/h3>
&lt;p>&lt;strong>Teknik: 3 | İş Hayatına Etkisi ?&lt;/strong>&lt;/p>
&lt;p>Injection veri kaybına, yolsuzluğa veya illegal partilerin ifşalanmasına, bir partinin suçlanılabilirliğinin kaybına, veya sisteme erişimin reddedilmesine yol açabilir. Injection, bazen host makinanın devralınmasına neden olabilir.
Injection&amp;rsquo;ın iş hayatına etkisi, uygulama ve veri ihtiyaçlarına göre değişkenlik gösterebilir.&lt;/p>
&lt;h3 id="uygulamanız-savunmasız-mı">Uygulamanız Savunmasız mı?&lt;/h3>
&lt;p>Bir uygulama şu nedenlerden dolayı saldırıya açıktır:&lt;/p>
&lt;ul>
&lt;li>Kullanıcı tarafından girilen veri uygulama tarafından onaylanmaz, filtrelenmez veya işleme tabi tutulmazsa&lt;/li>
&lt;li>Dinamik sorgular veya context-aware escaping&amp;rsquo;siz parametresiz çağrılar direkt olarak yorumlayıcıda kullanılırsa&lt;/li>
&lt;li>Tehditvari veriler, sorguya ek bir şekilde hassas kayıtları elde etme amacıyla, ORM&amp;rsquo;de arama parametreleri içinde kullanılırsa&lt;/li>
&lt;li>Tehditvari veriler, dinamik sorgular, komutlar veya stored procedure&amp;rsquo;ler, hem yapısal hem de düşmanca veriler içerek şekilde, SQL veya komut gibi direkt olarak
veya birleştirilerek kullanılırsa&lt;/li>
&lt;/ul>
&lt;p>En yaygın injection&amp;rsquo;lardan bazıları SQL, NoSQL, işletim sistemi komutları, ORM, LDAP ve Expression dili ve OGNL injection&amp;rsquo;larıdır. Tüm yorumlayıcılarda konsept birebir aynıdır. Kaynak kodun gözden geçirilmesi, bütün parametrelerin, header&amp;rsquo;ların, URL&amp;rsquo;lerin, cookie&amp;rsquo;lerin, JSON, SOAP ve XML veri girdilerinin otomatik teste tabi tutulması, uygulamaların injection zaafiyetleri olup olmadığını saptamak için en iyi yöntemdir.&lt;/p>
&lt;p>Kurumlar, ürünün dağıtımıdan önce yeni çıkan injection açıklarını saptamak için,statik kod ve dinamik uygulama test araçlarını CI/CD pipeline&amp;rsquo;a dahil edebilirler.&lt;/p>
&lt;h3 id="nasıl-önlenir">Nasıl Önlenir?&lt;/h3>
&lt;p>Injection&amp;rsquo;ı önlemek, veriyi komutlardan ve sorgulardan ayrı tutmayı gerektirir.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Tercih edilen seçenek, yorumlayıcıyı baştan sona kullanmaktan kaçınan veya parametrize edilmiş bir arayüz sunan veya ORM araçlarını kullanmak için geçiş sunan güvenli bir API kullanmaktır.&lt;/p>
&lt;p>&lt;strong>Not&lt;/strong>: Parametrize edilse bile, stored procedure&amp;rsquo;ler, eğer PL/SQL veya T-SQL; sorgu ile veriyi birleştiriyorsa veya tehditvari veriyi EXECUTE IMMEDIATE veya exec() ile kullanıyorsa hala SQL injection&amp;rsquo;a sebep olabilir.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Server tarafında pozitif veya whitelist girdi kontrolü (input validation) kullanın. Pek çok uygulama [special characters] gerektirdiğinden, bu önlem tam savunma
sağlamayabilir.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bahsetmediğimiz diğer dinamik sorgular için, kullandığınız yorumlayıcıya özel escape syntax kullanarak special characters kullanmaktan kaçının.
&lt;strong>Not&lt;/strong>: Tablo isimleri, column isimleri ve benzerleri gibi SQL yapıları kullanmaktan mecburen kaçınamayız, bu yüzden kullanıcı tarafından sağlanan yapı isimleri tehlikelidir. Bu yazılımı kodlarken yapılan genel bir hatadır.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SQL Injection durumunda kayıtların toplu olarak açığa çıkarılmasını önlemek için, sorgularda LIMIT ve diğer SQL kontrollerini kullanın.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="örnek-saldırı-senaryoları">Örnek Saldırı Senaryoları&lt;/h3>
&lt;p>&lt;strong>Senaryo #1:&lt;/strong> Bir uygulama, aşağıdaki zaafiyetli SQL sorgusunu oluştururken güvenilmeyen veriyi birleştiriyor.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>String query &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM accounts WHERE custID=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> request.getParameter(&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Senaryo #2:&lt;/strong> Benzer bir şekilde, bir uygulamanın framework&amp;rsquo;lere körü körüne güvenmesi hala zaafiyetli olan sorgulara neden olabilir. (örneğin Hibernate Query Language (HQL)) :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>Query HQLQuery &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">session&lt;/span>.createQuery(&lt;span style="color:#e6db74">&amp;#34;FROM accounts WHERE custID=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> request.getParameter(&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Her iki durumda da, saldırgan &amp;lsquo;id&amp;rsquo; parametre yerine tarayıcıdan şu değeri girebilir: ‘ or ‘1’=’1. Örneğin;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>http:&lt;span style="color:#f92672">//&lt;/span>example.com&lt;span style="color:#f92672">/&lt;/span>app&lt;span style="color:#f92672">/&lt;/span>accountView&lt;span style="color:#f92672">?&lt;/span>id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; or &amp;#39;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bu değişikler, kayıtların tutulduğu tablodan tüm kayıtları çekmek için, her iki sorgunun da anlamını değiştirir. Daha tehlikeli saldırılar veriyi değiştirmek veya silmek ve hatta &amp;lsquo;stored procedure&amp;rsquo;leri bile çağırmak olabilir.&lt;/p></content></item></channel></rss>